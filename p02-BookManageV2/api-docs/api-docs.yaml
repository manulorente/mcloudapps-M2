openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Get a user by id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid format id supplied
        "200":
          description: Found the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: User not found
    put:
      tags:
      - user-rest-controller
      summary: Update a user
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDTO'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        "404":
          description: User not found
    delete:
      tags:
      - user-rest-controller
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid format id supplied
        "204":
          description: User deleted
        "404":
          description: User not found
  /api/v1/comments/{id}:
    get:
      tags:
      - comment-rest-controller
      summary: Get a comment by id
      operationId: getCommentById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDTO'
        "404":
          description: Comment not found
        "400":
          description: Invalid format id supplied
    put:
      tags:
      - comment-rest-controller
      summary: Update a comment
      operationId: updateComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDTO'
        required: true
      responses:
        "400":
          description: Invalid comment attributes supplied
        "404":
          description: Comment not found
        "200":
          description: Updated the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDTO'
    delete:
      tags:
      - comment-rest-controller
      summary: Delete a comment
      operationId: deleteComment
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Comment not found
        "400":
          description: Invalid format id supplied
        "200":
          description: Deleted the comment
  /api/v1/books/{id}:
    get:
      tags:
      - book-rest-controller
      summary: Get a book by the id
      operationId: getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
        "200":
          description: Get a book by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
        "400":
          description: Invalid format id supplied
    put:
      tags:
      - book-rest-controller
      summary: Update a book
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateDTO'
        required: true
      responses:
        "400":
          description: Invalid book attributes supplied
        "404":
          description: Book not found
        "200":
          description: Updated the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
    delete:
      tags:
      - book-rest-controller
      summary: Delete a book
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Book not found
        "400":
          description: Invalid format id supplied
        "200":
          description: Deleted the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
  /api/v1/users/:
    get:
      tags:
      - user-rest-controller
      summary: Get all users
      operationId: getAllUsers
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Found all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
      - user-rest-controller
      summary: Create a user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDTO'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/v1/comments/:
    get:
      tags:
      - comment-rest-controller
      summary: Get all comments
      operationId: getAllComments
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Found all comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDTO'
    post:
      tags:
      - comment-rest-controller
      summary: Add a comment to a book
      operationId: addComment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreateDTO'
        required: true
      responses:
        "404":
          description: Book not found
        "400":
          description: Invalid comment attributes supplied
        "201":
          description: Added the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentDTO'
  /api/v1/books/:
    get:
      tags:
      - book-rest-controller
      summary: Get all books
      operationId: getBooks
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "200":
          description: Get all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookDTO'
    post:
      tags:
      - book-rest-controller
      summary: Create a new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateDTO'
        required: true
      responses:
        "400":
          description: Invalid book attributes supplied
        "201":
          description: Created the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDTO'
  /api/v1/users/{id}/comments:
    get:
      tags:
      - user-rest-controller
      summary: Get all comments of a user
      operationId: getAllCommentsOfUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid format id supplied
        "200":
          description: Found all comments of the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentDTO'
        "404":
          description: User not found
components:
  schemas:
    UserCreateDTO:
      type: object
      properties:
        nickname:
          type: string
        email:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
        email:
          type: string
    CommentCreateDTO:
      type: object
      properties:
        text:
          type: string
        rating:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
    CommentDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        rating:
          type: integer
          format: int64
        userId:
          type: integer
          format: int64
        bookId:
          type: integer
          format: int64
    BookCreateDTO:
      type: object
      properties:
        title:
          type: string
        summary:
          type: string
        author:
          type: string
        publisher:
          type: string
        date:
          type: string
    BookDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        summary:
          type: string
        author:
          type: string
        publisher:
          type: string
        date:
          type: string
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentDTO'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
